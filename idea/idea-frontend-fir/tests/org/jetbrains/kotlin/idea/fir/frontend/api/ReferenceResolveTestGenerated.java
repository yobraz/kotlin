/*
 * Copyright 2010-2021 JetBrains s.r.o. and Kotlin Programming Language contributors.
 * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.
 */

package org.jetbrains.kotlin.idea.fir.frontend.api;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.test.util.KtTestUtil;
import org.jetbrains.kotlin.test.TestMetadata;
import org.junit.jupiter.api.Nested;
import org.junit.jupiter.api.Test;

import java.io.File;
import java.util.regex.Pattern;

/** This class is generated by {@link GenerateNewCompilerTests.kt}. DO NOT MODIFY MANUALLY */
@SuppressWarnings("all")
@TestMetadata("idea/idea-frontend-fir/testData/referenceResolve")
@TestDataPath("$PROJECT_ROOT")
public class ReferenceResolveTestGenerated extends AbstractReferenceResolveTest {
    @Test
    public void testAllFilesPresentInReferenceResolve() throws Exception {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("idea/idea-frontend-fir/testData/referenceResolve"), Pattern.compile("^([^.]+)\\.kt$"), null, true);
    }

    @Test
    @TestMetadata("AnnotationForClass.kt")
    public void testAnnotationForClass() throws Exception {
        runTest("idea/idea-frontend-fir/testData/referenceResolve/AnnotationForClass.kt");
    }

    @Test
    @TestMetadata("AnnotationInsideFunction.kt")
    public void testAnnotationInsideFunction() throws Exception {
        runTest("idea/idea-frontend-fir/testData/referenceResolve/AnnotationInsideFunction.kt");
    }

    @Test
    @TestMetadata("AnnotationOnFile.kt")
    public void testAnnotationOnFile() throws Exception {
        runTest("idea/idea-frontend-fir/testData/referenceResolve/AnnotationOnFile.kt");
    }

    @Test
    @TestMetadata("AnnotationOnFileWithImport.kt")
    public void testAnnotationOnFileWithImport() throws Exception {
        runTest("idea/idea-frontend-fir/testData/referenceResolve/AnnotationOnFileWithImport.kt");
    }

    @Test
    @TestMetadata("AnnotationParameter.kt")
    public void testAnnotationParameter() throws Exception {
        runTest("idea/idea-frontend-fir/testData/referenceResolve/AnnotationParameter.kt");
    }

    @Test
    @TestMetadata("AnnotationTypeParameter.kt")
    public void testAnnotationTypeParameter() throws Exception {
        runTest("idea/idea-frontend-fir/testData/referenceResolve/AnnotationTypeParameter.kt");
    }

    @Test
    @TestMetadata("ClassInTypeConstraint.kt")
    public void testClassInTypeConstraint() throws Exception {
        runTest("idea/idea-frontend-fir/testData/referenceResolve/ClassInTypeConstraint.kt");
    }

    @Test
    @TestMetadata("ClassNameBeforeDot.kt")
    public void testClassNameBeforeDot() throws Exception {
        runTest("idea/idea-frontend-fir/testData/referenceResolve/ClassNameBeforeDot.kt");
    }

    @Test
    @TestMetadata("ClassObjectClassLiteralReference.kt")
    public void testClassObjectClassLiteralReference() throws Exception {
        runTest("idea/idea-frontend-fir/testData/referenceResolve/ClassObjectClassLiteralReference.kt");
    }

    @Test
    @TestMetadata("ClassObjectClassLiteralReferenceWithField.kt")
    public void testClassObjectClassLiteralReferenceWithField() throws Exception {
        runTest("idea/idea-frontend-fir/testData/referenceResolve/ClassObjectClassLiteralReferenceWithField.kt");
    }

    @Test
    @TestMetadata("ClassQualifierForNestedClassConstructorCall.kt")
    public void testClassQualifierForNestedClassConstructorCall() throws Exception {
        runTest("idea/idea-frontend-fir/testData/referenceResolve/ClassQualifierForNestedClassConstructorCall.kt");
    }

    @Test
    @TestMetadata("ClassReferenceInImport.kt")
    public void testClassReferenceInImport() throws Exception {
        runTest("idea/idea-frontend-fir/testData/referenceResolve/ClassReferenceInImport.kt");
    }

    @Test
    @TestMetadata("CollectionLiteralLeft.kt")
    public void testCollectionLiteralLeft() throws Exception {
        runTest("idea/idea-frontend-fir/testData/referenceResolve/CollectionLiteralLeft.kt");
    }

    @Test
    @TestMetadata("CollectionLiteralRight.kt")
    public void testCollectionLiteralRight() throws Exception {
        runTest("idea/idea-frontend-fir/testData/referenceResolve/CollectionLiteralRight.kt");
    }

    @Test
    @TestMetadata("CoroutineSuspensionPoint.kt")
    public void testCoroutineSuspensionPoint() throws Exception {
        runTest("idea/idea-frontend-fir/testData/referenceResolve/CoroutineSuspensionPoint.kt");
    }

    @Test
    @TestMetadata("CtrlClickResolve.kt")
    public void testCtrlClickResolve() throws Exception {
        runTest("idea/idea-frontend-fir/testData/referenceResolve/CtrlClickResolve.kt");
    }

    @Test
    @TestMetadata("DefaultObjectAsExtensionReceiverForFunction.kt")
    public void testDefaultObjectAsExtensionReceiverForFunction() throws Exception {
        runTest("idea/idea-frontend-fir/testData/referenceResolve/DefaultObjectAsExtensionReceiverForFunction.kt");
    }

    @Test
    @TestMetadata("DefaultObjectAsExtensionReceiverForProperty.kt")
    public void testDefaultObjectAsExtensionReceiverForProperty() throws Exception {
        runTest("idea/idea-frontend-fir/testData/referenceResolve/DefaultObjectAsExtensionReceiverForProperty.kt");
    }

    @Test
    @TestMetadata("DefaultObjectAsReceiverForExtensionFunctionOnSuperType.kt")
    public void testDefaultObjectAsReceiverForExtensionFunctionOnSuperType() throws Exception {
        runTest("idea/idea-frontend-fir/testData/referenceResolve/DefaultObjectAsReceiverForExtensionFunctionOnSuperType.kt");
    }

    @Test
    @TestMetadata("DefaultObjectAsReceiverForMemberPropertyInSuperType.kt")
    public void testDefaultObjectAsReceiverForMemberPropertyInSuperType() throws Exception {
        runTest("idea/idea-frontend-fir/testData/referenceResolve/DefaultObjectAsReceiverForMemberPropertyInSuperType.kt");
    }

    @Test
    @TestMetadata("DefaultObjectInShortReferenceFormCall.kt")
    public void testDefaultObjectInShortReferenceFormCall() throws Exception {
        runTest("idea/idea-frontend-fir/testData/referenceResolve/DefaultObjectInShortReferenceFormCall.kt");
    }

    @Test
    @TestMetadata("EnumValues.kt")
    public void testEnumValues() throws Exception {
        runTest("idea/idea-frontend-fir/testData/referenceResolve/EnumValues.kt");
    }

    @Test
    @TestMetadata("ExternalCompanionObject.kt")
    public void testExternalCompanionObject() throws Exception {
        runTest("idea/idea-frontend-fir/testData/referenceResolve/ExternalCompanionObject.kt");
    }

    @Test
    @TestMetadata("FakeJavaLang1.kt")
    public void testFakeJavaLang1() throws Exception {
        runTest("idea/idea-frontend-fir/testData/referenceResolve/FakeJavaLang1.kt");
    }

    @Test
    @TestMetadata("FakeJavaLang2.kt")
    public void testFakeJavaLang2() throws Exception {
        runTest("idea/idea-frontend-fir/testData/referenceResolve/FakeJavaLang2.kt");
    }

    @Test
    @TestMetadata("FakeJavaLang3.kt")
    public void testFakeJavaLang3() throws Exception {
        runTest("idea/idea-frontend-fir/testData/referenceResolve/FakeJavaLang3.kt");
    }

    @Test
    @TestMetadata("FakeJavaLang4.kt")
    public void testFakeJavaLang4() throws Exception {
        runTest("idea/idea-frontend-fir/testData/referenceResolve/FakeJavaLang4.kt");
    }

    @Test
    @TestMetadata("functionCall.kt")
    public void testFunctionCall() throws Exception {
        runTest("idea/idea-frontend-fir/testData/referenceResolve/functionCall.kt");
    }

    @Test
    @TestMetadata("GenericFunctionParameter.kt")
    public void testGenericFunctionParameter() throws Exception {
        runTest("idea/idea-frontend-fir/testData/referenceResolve/GenericFunctionParameter.kt");
    }

    @Test
    @TestMetadata("GenericTypeInFunctionParameter.kt")
    public void testGenericTypeInFunctionParameter() throws Exception {
        runTest("idea/idea-frontend-fir/testData/referenceResolve/GenericTypeInFunctionParameter.kt");
    }

    @Test
    @TestMetadata("ImportFromRootScope.kt")
    public void testImportFromRootScope() throws Exception {
        runTest("idea/idea-frontend-fir/testData/referenceResolve/ImportFromRootScope.kt");
    }

    @Test
    @TestMetadata("InClassParameter.kt")
    public void testInClassParameter() throws Exception {
        runTest("idea/idea-frontend-fir/testData/referenceResolve/InClassParameter.kt");
    }

    @Test
    @TestMetadata("InClassParameterField.kt")
    public void testInClassParameterField() throws Exception {
        runTest("idea/idea-frontend-fir/testData/referenceResolve/InClassParameterField.kt");
    }

    @Test
    @TestMetadata("InEnumEntry.kt")
    public void testInEnumEntry() throws Exception {
        runTest("idea/idea-frontend-fir/testData/referenceResolve/InEnumEntry.kt");
    }

    @Test
    @TestMetadata("InFunctionParameterType.kt")
    public void testInFunctionParameterType() throws Exception {
        runTest("idea/idea-frontend-fir/testData/referenceResolve/InFunctionParameterType.kt");
    }

    @Test
    @TestMetadata("InMethodParameter.kt")
    public void testInMethodParameter() throws Exception {
        runTest("idea/idea-frontend-fir/testData/referenceResolve/InMethodParameter.kt");
    }

    @Test
    @TestMetadata("InMethodVarargParameter.kt")
    public void testInMethodVarargParameter() throws Exception {
        runTest("idea/idea-frontend-fir/testData/referenceResolve/InMethodVarargParameter.kt");
    }

    @Test
    @TestMetadata("InObjectClassObject.kt")
    public void testInObjectClassObject() throws Exception {
        runTest("idea/idea-frontend-fir/testData/referenceResolve/InObjectClassObject.kt");
    }

    @Test
    @TestMetadata("InSecondClassObject.kt")
    public void testInSecondClassObject() throws Exception {
        runTest("idea/idea-frontend-fir/testData/referenceResolve/InSecondClassObject.kt");
    }

    @Test
    @TestMetadata("InVaragReferenceInFunctionBody.kt")
    public void testInVaragReferenceInFunctionBody() throws Exception {
        runTest("idea/idea-frontend-fir/testData/referenceResolve/InVaragReferenceInFunctionBody.kt");
    }

    @Test
    @TestMetadata("InVaragReferenceInNamedParameter.kt")
    public void testInVaragReferenceInNamedParameter() throws Exception {
        runTest("idea/idea-frontend-fir/testData/referenceResolve/InVaragReferenceInNamedParameter.kt");
    }

    @Test
    @TestMetadata("JavaAnnotationParameter.kt")
    public void testJavaAnnotationParameter() throws Exception {
        runTest("idea/idea-frontend-fir/testData/referenceResolve/JavaAnnotationParameter.kt");
    }

    @Test
    @TestMetadata("JavaConstructorNotNullParameter.kt")
    public void testJavaConstructorNotNullParameter() throws Exception {
        runTest("idea/idea-frontend-fir/testData/referenceResolve/JavaConstructorNotNullParameter.kt");
    }

    @Test
    @TestMetadata("JavaEnumEntry.kt")
    public void testJavaEnumEntry() throws Exception {
        runTest("idea/idea-frontend-fir/testData/referenceResolve/JavaEnumEntry.kt");
    }

    @Test
    @TestMetadata("JavaEnumValueOf.kt")
    public void testJavaEnumValueOf() throws Exception {
        runTest("idea/idea-frontend-fir/testData/referenceResolve/JavaEnumValueOf.kt");
    }

    @Test
    @TestMetadata("JavaReference.kt")
    public void testJavaReference() throws Exception {
        runTest("idea/idea-frontend-fir/testData/referenceResolve/JavaReference.kt");
    }

    @Test
    @TestMetadata("KotlinPropertyAssignment.kt")
    public void testKotlinPropertyAssignment() throws Exception {
        runTest("idea/idea-frontend-fir/testData/referenceResolve/KotlinPropertyAssignment.kt");
    }

    @Test
    @TestMetadata("KotlinPropertyWithGetterAndSetterAssignment.kt")
    public void testKotlinPropertyWithGetterAndSetterAssignment() throws Exception {
        runTest("idea/idea-frontend-fir/testData/referenceResolve/KotlinPropertyWithGetterAndSetterAssignment.kt");
    }

    @Test
    @TestMetadata("MultiDeclarationExtension.kt")
    public void testMultiDeclarationExtension() throws Exception {
        runTest("idea/idea-frontend-fir/testData/referenceResolve/MultiDeclarationExtension.kt");
    }

    @Test
    @TestMetadata("MultiDeclarationMember.kt")
    public void testMultiDeclarationMember() throws Exception {
        runTest("idea/idea-frontend-fir/testData/referenceResolve/MultiDeclarationMember.kt");
    }

    @Test
    @TestMetadata("NamedClassObject.kt")
    public void testNamedClassObject() throws Exception {
        runTest("idea/idea-frontend-fir/testData/referenceResolve/NamedClassObject.kt");
    }

    @Test
    @TestMetadata("PackageReference.kt")
    public void testPackageReference() throws Exception {
        runTest("idea/idea-frontend-fir/testData/referenceResolve/PackageReference.kt");
    }

    @Test
    @TestMetadata("PackageReferenceInImport.kt")
    public void testPackageReferenceInImport() throws Exception {
        runTest("idea/idea-frontend-fir/testData/referenceResolve/PackageReferenceInImport.kt");
    }

    @Test
    @TestMetadata("parameterByName.kt")
    public void testParameterByName() throws Exception {
        runTest("idea/idea-frontend-fir/testData/referenceResolve/parameterByName.kt");
    }

    @Test
    @TestMetadata("PropertyPlaceInClassObjectInObject.kt")
    public void testPropertyPlaceInClassObjectInObject() throws Exception {
        runTest("idea/idea-frontend-fir/testData/referenceResolve/PropertyPlaceInClassObjectInObject.kt");
    }

    @Test
    @TestMetadata("ReferenceInClassWhereConstraint.kt")
    public void testReferenceInClassWhereConstraint() throws Exception {
        runTest("idea/idea-frontend-fir/testData/referenceResolve/ReferenceInClassWhereConstraint.kt");
    }

    @Test
    @TestMetadata("ReferenceInFunWhereConstraint.kt")
    public void testReferenceInFunWhereConstraint() throws Exception {
        runTest("idea/idea-frontend-fir/testData/referenceResolve/ReferenceInFunWhereConstraint.kt");
    }

    @Test
    @TestMetadata("ReferenceToSam.kt")
    public void testReferenceToSam() throws Exception {
        runTest("idea/idea-frontend-fir/testData/referenceResolve/ReferenceToSam.kt");
    }

    @Test
    @TestMetadata("ResolveClass.kt")
    public void testResolveClass() throws Exception {
        runTest("idea/idea-frontend-fir/testData/referenceResolve/ResolveClass.kt");
    }

    @Test
    @TestMetadata("ResolvePackageInProperty.kt")
    public void testResolvePackageInProperty() throws Exception {
        runTest("idea/idea-frontend-fir/testData/referenceResolve/ResolvePackageInProperty.kt");
    }

    @Test
    @TestMetadata("ResolvePackageInTheEndInProperty.kt")
    public void testResolvePackageInTheEndInProperty() throws Exception {
        runTest("idea/idea-frontend-fir/testData/referenceResolve/ResolvePackageInTheEndInProperty.kt");
    }

    @Test
    @TestMetadata("ResolvePackageInTheMiddleInProperty.kt")
    public void testResolvePackageInTheMiddleInProperty() throws Exception {
        runTest("idea/idea-frontend-fir/testData/referenceResolve/ResolvePackageInTheMiddleInProperty.kt");
    }

    @Test
    @TestMetadata("ResolvePackageInTheTypeNameInProperty.kt")
    public void testResolvePackageInTheTypeNameInProperty() throws Exception {
        runTest("idea/idea-frontend-fir/testData/referenceResolve/ResolvePackageInTheTypeNameInProperty.kt");
    }

    @Test
    @TestMetadata("SamAdapter.kt")
    public void testSamAdapter() throws Exception {
        runTest("idea/idea-frontend-fir/testData/referenceResolve/SamAdapter.kt");
    }

    @Test
    @TestMetadata("SamConstructor.kt")
    public void testSamConstructor() throws Exception {
        runTest("idea/idea-frontend-fir/testData/referenceResolve/SamConstructor.kt");
    }

    @Test
    @TestMetadata("SamConstructorTypeArguments.kt")
    public void testSamConstructorTypeArguments() throws Exception {
        runTest("idea/idea-frontend-fir/testData/referenceResolve/SamConstructorTypeArguments.kt");
    }

    @Test
    @TestMetadata("SeveralOverrides.kt")
    public void testSeveralOverrides() throws Exception {
        runTest("idea/idea-frontend-fir/testData/referenceResolve/SeveralOverrides.kt");
    }

    @Test
    @TestMetadata("SyntheticProperty.kt")
    public void testSyntheticProperty() throws Exception {
        runTest("idea/idea-frontend-fir/testData/referenceResolve/SyntheticProperty.kt");
    }

    @Test
    @TestMetadata("TopLevelClassVsLocalClassConstructor.kt")
    public void testTopLevelClassVsLocalClassConstructor() throws Exception {
        runTest("idea/idea-frontend-fir/testData/referenceResolve/TopLevelClassVsLocalClassConstructor.kt");
    }

    @Test
    @TestMetadata("TopLevelClassVsLocalClassConstructor2.kt")
    public void testTopLevelClassVsLocalClassConstructor2() throws Exception {
        runTest("idea/idea-frontend-fir/testData/referenceResolve/TopLevelClassVsLocalClassConstructor2.kt");
    }

    @Test
    @TestMetadata("TopLevelClassVsLocalClassQualifier.kt")
    public void testTopLevelClassVsLocalClassQualifier() throws Exception {
        runTest("idea/idea-frontend-fir/testData/referenceResolve/TopLevelClassVsLocalClassQualifier.kt");
    }

    @Test
    @TestMetadata("TopLevelCompanionObjectVsLocalClassConstructor.kt")
    public void testTopLevelCompanionObjectVsLocalClassConstructor() throws Exception {
        runTest("idea/idea-frontend-fir/testData/referenceResolve/TopLevelCompanionObjectVsLocalClassConstructor.kt");
    }

    @Test
    @TestMetadata("TopLevelCompanionObjectVsLocalClassConstructor2.kt")
    public void testTopLevelCompanionObjectVsLocalClassConstructor2() throws Exception {
        runTest("idea/idea-frontend-fir/testData/referenceResolve/TopLevelCompanionObjectVsLocalClassConstructor2.kt");
    }

    @Test
    @TestMetadata("TopLevelCompanionObjectVsLocalClassQualifier.kt")
    public void testTopLevelCompanionObjectVsLocalClassQualifier() throws Exception {
        runTest("idea/idea-frontend-fir/testData/referenceResolve/TopLevelCompanionObjectVsLocalClassQualifier.kt");
    }

    @Test
    @TestMetadata("TopLevelObjectVsLocalClassConstructor.kt")
    public void testTopLevelObjectVsLocalClassConstructor() throws Exception {
        runTest("idea/idea-frontend-fir/testData/referenceResolve/TopLevelObjectVsLocalClassConstructor.kt");
    }

    @Test
    @TestMetadata("TopLevelObjectVsLocalClassConstructor2.kt")
    public void testTopLevelObjectVsLocalClassConstructor2() throws Exception {
        runTest("idea/idea-frontend-fir/testData/referenceResolve/TopLevelObjectVsLocalClassConstructor2.kt");
    }

    @Test
    @TestMetadata("TopLevelObjectVsLocalClassConstructor3.kt")
    public void testTopLevelObjectVsLocalClassConstructor3() throws Exception {
        runTest("idea/idea-frontend-fir/testData/referenceResolve/TopLevelObjectVsLocalClassConstructor3.kt");
    }

    @Test
    @TestMetadata("TopLevelObjectVsLocalClassQualifier.kt")
    public void testTopLevelObjectVsLocalClassQualifier() throws Exception {
        runTest("idea/idea-frontend-fir/testData/referenceResolve/TopLevelObjectVsLocalClassQualifier.kt");
    }

    @Test
    @TestMetadata("TypeAlias.kt")
    public void testTypeAlias() throws Exception {
        runTest("idea/idea-frontend-fir/testData/referenceResolve/TypeAlias.kt");
    }

    @Test
    @TestMetadata("TypeAliasAsSupertypeConstructor.kt")
    public void testTypeAliasAsSupertypeConstructor() throws Exception {
        runTest("idea/idea-frontend-fir/testData/referenceResolve/TypeAliasAsSupertypeConstructor.kt");
    }

    @Test
    @TestMetadata("TypeAliasRHS.kt")
    public void testTypeAliasRHS() throws Exception {
        runTest("idea/idea-frontend-fir/testData/referenceResolve/TypeAliasRHS.kt");
    }

    @Test
    @TestMetadata("TypeArgumentBeforeDot.kt")
    public void testTypeArgumentBeforeDot() throws Exception {
        runTest("idea/idea-frontend-fir/testData/referenceResolve/TypeArgumentBeforeDot.kt");
    }

    @Test
    @TestMetadata("TypeArgumentBeforeDot2.kt")
    public void testTypeArgumentBeforeDot2() throws Exception {
        runTest("idea/idea-frontend-fir/testData/referenceResolve/TypeArgumentBeforeDot2.kt");
    }

    @Test
    @TestMetadata("TypeArgumentUnresolvedClass.kt")
    public void testTypeArgumentUnresolvedClass() throws Exception {
        runTest("idea/idea-frontend-fir/testData/referenceResolve/TypeArgumentUnresolvedClass.kt");
    }

    @Test
    @TestMetadata("TypeArgumentUnresolvedConstructor.kt")
    public void testTypeArgumentUnresolvedConstructor() throws Exception {
        runTest("idea/idea-frontend-fir/testData/referenceResolve/TypeArgumentUnresolvedConstructor.kt");
    }

    @Test
    @TestMetadata("TypeArgumentWrongNumber.kt")
    public void testTypeArgumentWrongNumber() throws Exception {
        runTest("idea/idea-frontend-fir/testData/referenceResolve/TypeArgumentWrongNumber.kt");
    }

    @Test
    @TestMetadata("TypeParameterInAnonymousObject.kt")
    public void testTypeParameterInAnonymousObject() throws Exception {
        runTest("idea/idea-frontend-fir/testData/referenceResolve/TypeParameterInAnonymousObject.kt");
    }

    @Test
    @TestMetadata("TypeParameterInFunctionLiteral.kt")
    public void testTypeParameterInFunctionLiteral() throws Exception {
        runTest("idea/idea-frontend-fir/testData/referenceResolve/TypeParameterInFunctionLiteral.kt");
    }

    @Test
    @TestMetadata("ValueParameter.kt")
    public void testValueParameter() throws Exception {
        runTest("idea/idea-frontend-fir/testData/referenceResolve/ValueParameter.kt");
    }

    @Test
    @TestMetadata("WrongNumberOfTypeArguments.kt")
    public void testWrongNumberOfTypeArguments() throws Exception {
        runTest("idea/idea-frontend-fir/testData/referenceResolve/WrongNumberOfTypeArguments.kt");
    }

    @Test
    @TestMetadata("WrongNumberOfTypeArguments2.kt")
    public void testWrongNumberOfTypeArguments2() throws Exception {
        runTest("idea/idea-frontend-fir/testData/referenceResolve/WrongNumberOfTypeArguments2.kt");
    }

    @Test
    @TestMetadata("WrongNumberOfTypeArguments3.kt")
    public void testWrongNumberOfTypeArguments3() throws Exception {
        runTest("idea/idea-frontend-fir/testData/referenceResolve/WrongNumberOfTypeArguments3.kt");
    }

    @Test
    @TestMetadata("WrongNumberOfTypeArguments4.kt")
    public void testWrongNumberOfTypeArguments4() throws Exception {
        runTest("idea/idea-frontend-fir/testData/referenceResolve/WrongNumberOfTypeArguments4.kt");
    }

    @Test
    @TestMetadata("WrongNumberOfTypeArgumentsInSupertype.kt")
    public void testWrongNumberOfTypeArgumentsInSupertype() throws Exception {
        runTest("idea/idea-frontend-fir/testData/referenceResolve/WrongNumberOfTypeArgumentsInSupertype.kt");
    }

    @Nested
    @TestMetadata("idea/idea-frontend-fir/testData/referenceResolve/arrayAccess")
    @TestDataPath("$PROJECT_ROOT")
    public class ArrayAccess {
        @Test
        public void testAllFilesPresentInArrayAccess() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("idea/idea-frontend-fir/testData/referenceResolve/arrayAccess"), Pattern.compile("^([^.]+)\\.kt$"), null, true);
        }

        @Test
        @TestMetadata("get.kt")
        public void testGet() throws Exception {
            runTest("idea/idea-frontend-fir/testData/referenceResolve/arrayAccess/get.kt");
        }

        @Test
        @TestMetadata("set.kt")
        public void testSet() throws Exception {
            runTest("idea/idea-frontend-fir/testData/referenceResolve/arrayAccess/set.kt");
        }
    }

    @Nested
    @TestMetadata("idea/idea-frontend-fir/testData/referenceResolve/constructorDelegatingReference")
    @TestDataPath("$PROJECT_ROOT")
    public class ConstructorDelegatingReference {
        @Test
        public void testAllFilesPresentInConstructorDelegatingReference() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("idea/idea-frontend-fir/testData/referenceResolve/constructorDelegatingReference"), Pattern.compile("^([^.]+)\\.kt$"), null, true);
        }

        @Test
        @TestMetadata("toPrimary.kt")
        public void testToPrimary() throws Exception {
            runTest("idea/idea-frontend-fir/testData/referenceResolve/constructorDelegatingReference/toPrimary.kt");
        }

        @Test
        @TestMetadata("toSecondary.kt")
        public void testToSecondary() throws Exception {
            runTest("idea/idea-frontend-fir/testData/referenceResolve/constructorDelegatingReference/toSecondary.kt");
        }
    }

    @Nested
    @TestMetadata("idea/idea-frontend-fir/testData/referenceResolve/delegatedPropertyAccessors")
    @TestDataPath("$PROJECT_ROOT")
    public class DelegatedPropertyAccessors {
        @Test
        public void testAllFilesPresentInDelegatedPropertyAccessors() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("idea/idea-frontend-fir/testData/referenceResolve/delegatedPropertyAccessors"), Pattern.compile("^([^.]+)\\.kt$"), null, true);
        }

        @Test
        @TestMetadata("unresolved.kt")
        public void testUnresolved() throws Exception {
            runTest("idea/idea-frontend-fir/testData/referenceResolve/delegatedPropertyAccessors/unresolved.kt");
        }

        @Nested
        @TestMetadata("idea/idea-frontend-fir/testData/referenceResolve/delegatedPropertyAccessors/inSource")
        @TestDataPath("$PROJECT_ROOT")
        public class InSource {
            @Test
            public void testAllFilesPresentInInSource() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("idea/idea-frontend-fir/testData/referenceResolve/delegatedPropertyAccessors/inSource"), Pattern.compile("^([^.]+)\\.kt$"), null, true);
            }

            @Test
            @TestMetadata("getExtension.kt")
            public void testGetExtension() throws Exception {
                runTest("idea/idea-frontend-fir/testData/referenceResolve/delegatedPropertyAccessors/inSource/getExtension.kt");
            }

            @Test
            @TestMetadata("getMember.kt")
            public void testGetMember() throws Exception {
                runTest("idea/idea-frontend-fir/testData/referenceResolve/delegatedPropertyAccessors/inSource/getMember.kt");
            }

            @Test
            @TestMetadata("getMultipleDeclarations.kt")
            public void testGetMultipleDeclarations() throws Exception {
                runTest("idea/idea-frontend-fir/testData/referenceResolve/delegatedPropertyAccessors/inSource/getMultipleDeclarations.kt");
            }

            @Test
            @TestMetadata("getOneFakeOverride.kt")
            public void testGetOneFakeOverride() throws Exception {
                runTest("idea/idea-frontend-fir/testData/referenceResolve/delegatedPropertyAccessors/inSource/getOneFakeOverride.kt");
            }
        }

        @Nested
        @TestMetadata("idea/idea-frontend-fir/testData/referenceResolve/delegatedPropertyAccessors/inStandardLibrary")
        @TestDataPath("$PROJECT_ROOT")
        public class InStandardLibrary {
            @Test
            public void testAllFilesPresentInInStandardLibrary() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("idea/idea-frontend-fir/testData/referenceResolve/delegatedPropertyAccessors/inStandardLibrary"), Pattern.compile("^([^.]+)\\.kt$"), null, true);
            }

            @Test
            @TestMetadata("lazy.kt")
            public void testLazy() throws Exception {
                runTest("idea/idea-frontend-fir/testData/referenceResolve/delegatedPropertyAccessors/inStandardLibrary/lazy.kt");
            }

            @Test
            @TestMetadata("notNull.kt")
            public void testNotNull() throws Exception {
                runTest("idea/idea-frontend-fir/testData/referenceResolve/delegatedPropertyAccessors/inStandardLibrary/notNull.kt");
            }
        }
    }

    @Nested
    @TestMetadata("idea/idea-frontend-fir/testData/referenceResolve/forLoopIn")
    @TestDataPath("$PROJECT_ROOT")
    public class ForLoopIn {
        @Test
        public void testAllFilesPresentInForLoopIn() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("idea/idea-frontend-fir/testData/referenceResolve/forLoopIn"), Pattern.compile("^([^.]+)\\.kt$"), null, true);
        }

        @Test
        @TestMetadata("unresolvedIterator.kt")
        public void testUnresolvedIterator() throws Exception {
            runTest("idea/idea-frontend-fir/testData/referenceResolve/forLoopIn/unresolvedIterator.kt");
        }

        @Nested
        @TestMetadata("idea/idea-frontend-fir/testData/referenceResolve/forLoopIn/inBuiltIns")
        @TestDataPath("$PROJECT_ROOT")
        public class InBuiltIns {
            @Test
            public void testAllFilesPresentInInBuiltIns() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("idea/idea-frontend-fir/testData/referenceResolve/forLoopIn/inBuiltIns"), Pattern.compile("^([^.]+)\\.kt$"), null, true);
            }

            @Test
            @TestMetadata("extension.kt")
            public void testExtension() throws Exception {
                runTest("idea/idea-frontend-fir/testData/referenceResolve/forLoopIn/inBuiltIns/extension.kt");
            }

            @Test
            @TestMetadata("member.kt")
            public void testMember() throws Exception {
                runTest("idea/idea-frontend-fir/testData/referenceResolve/forLoopIn/inBuiltIns/member.kt");
            }
        }

        @Nested
        @TestMetadata("idea/idea-frontend-fir/testData/referenceResolve/forLoopIn/inLibrary")
        @TestDataPath("$PROJECT_ROOT")
        public class InLibrary {
            @Test
            public void testAllFilesPresentInInLibrary() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("idea/idea-frontend-fir/testData/referenceResolve/forLoopIn/inLibrary"), Pattern.compile("^([^.]+)\\.kt$"), null, true);
            }

            @Test
            @TestMetadata("extension.kt")
            public void testExtension() throws Exception {
                runTest("idea/idea-frontend-fir/testData/referenceResolve/forLoopIn/inLibrary/extension.kt");
            }
        }

        @Nested
        @TestMetadata("idea/idea-frontend-fir/testData/referenceResolve/forLoopIn/inSource")
        @TestDataPath("$PROJECT_ROOT")
        public class InSource {
            @Test
            @TestMetadata("allExtensions.kt")
            public void testAllExtensions() throws Exception {
                runTest("idea/idea-frontend-fir/testData/referenceResolve/forLoopIn/inSource/allExtensions.kt");
            }

            @Test
            public void testAllFilesPresentInInSource() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("idea/idea-frontend-fir/testData/referenceResolve/forLoopIn/inSource"), Pattern.compile("^([^.]+)\\.kt$"), null, true);
            }

            @Test
            @TestMetadata("allMembers.kt")
            public void testAllMembers() throws Exception {
                runTest("idea/idea-frontend-fir/testData/referenceResolve/forLoopIn/inSource/allMembers.kt");
            }

            @Test
            @TestMetadata("nextMissing.kt")
            public void testNextMissing() throws Exception {
                runTest("idea/idea-frontend-fir/testData/referenceResolve/forLoopIn/inSource/nextMissing.kt");
            }
        }
    }

    @Nested
    @TestMetadata("idea/idea-frontend-fir/testData/referenceResolve/inImport")
    @TestDataPath("$PROJECT_ROOT")
    public class InImport {
        @Test
        public void testAllFilesPresentInInImport() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("idea/idea-frontend-fir/testData/referenceResolve/inImport"), Pattern.compile("^([^.]+)\\.kt$"), null, true);
        }

        @Test
        @TestMetadata("javaClass.kt")
        public void testJavaClass() throws Exception {
            runTest("idea/idea-frontend-fir/testData/referenceResolve/inImport/javaClass.kt");
        }

        @Test
        @TestMetadata("javaPackageFirstQualifier.kt")
        public void testJavaPackageFirstQualifier() throws Exception {
            runTest("idea/idea-frontend-fir/testData/referenceResolve/inImport/javaPackageFirstQualifier.kt");
        }

        @Test
        @TestMetadata("javaPackageSecondQualifier.kt")
        public void testJavaPackageSecondQualifier() throws Exception {
            runTest("idea/idea-frontend-fir/testData/referenceResolve/inImport/javaPackageSecondQualifier.kt");
        }

        @Test
        @TestMetadata("kotlinClass.kt")
        public void testKotlinClass() throws Exception {
            runTest("idea/idea-frontend-fir/testData/referenceResolve/inImport/kotlinClass.kt");
        }

        @Test
        @TestMetadata("kotlinPackageFirstQualifier.kt")
        public void testKotlinPackageFirstQualifier() throws Exception {
            runTest("idea/idea-frontend-fir/testData/referenceResolve/inImport/kotlinPackageFirstQualifier.kt");
        }

        @Test
        @TestMetadata("kotlinPackageSecondQualifier.kt")
        public void testKotlinPackageSecondQualifier() throws Exception {
            runTest("idea/idea-frontend-fir/testData/referenceResolve/inImport/kotlinPackageSecondQualifier.kt");
        }

        @Test
        @TestMetadata("kotlinTopLevelFunction.kt")
        public void testKotlinTopLevelFunction() throws Exception {
            runTest("idea/idea-frontend-fir/testData/referenceResolve/inImport/kotlinTopLevelFunction.kt");
        }

        @Test
        @TestMetadata("staticMethodFromJavaClass.kt")
        public void testStaticMethodFromJavaClass() throws Exception {
            runTest("idea/idea-frontend-fir/testData/referenceResolve/inImport/staticMethodFromJavaClass.kt");
        }

        @Test
        @TestMetadata("staticMethodFromJavaClassJavaClass.kt")
        public void testStaticMethodFromJavaClassJavaClass() throws Exception {
            runTest("idea/idea-frontend-fir/testData/referenceResolve/inImport/staticMethodFromJavaClassJavaClass.kt");
        }
    }

    @Nested
    @TestMetadata("idea/idea-frontend-fir/testData/referenceResolve/invoke")
    @TestDataPath("$PROJECT_ROOT")
    public class Invoke {
        @Test
        public void testAllFilesPresentInInvoke() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("idea/idea-frontend-fir/testData/referenceResolve/invoke"), Pattern.compile("^([^.]+)\\.kt$"), null, true);
        }

        @Test
        @TestMetadata("lambdaAndParens.kt")
        public void testLambdaAndParens() throws Exception {
            runTest("idea/idea-frontend-fir/testData/referenceResolve/invoke/lambdaAndParens.kt");
        }

        @Test
        @TestMetadata("lambdaAndParensIncorrectVararg.kt")
        public void testLambdaAndParensIncorrectVararg() throws Exception {
            runTest("idea/idea-frontend-fir/testData/referenceResolve/invoke/lambdaAndParensIncorrectVararg.kt");
        }

        @Test
        @TestMetadata("lambdaNoPar.kt")
        public void testLambdaNoPar() throws Exception {
            runTest("idea/idea-frontend-fir/testData/referenceResolve/invoke/lambdaNoPar.kt");
        }

        @Test
        @TestMetadata("lambdaNoParIncorrectVararg.kt")
        public void testLambdaNoParIncorrectVararg() throws Exception {
            runTest("idea/idea-frontend-fir/testData/referenceResolve/invoke/lambdaNoParIncorrectVararg.kt");
        }

        @Test
        @TestMetadata("lambdaNoParLabel.kt")
        public void testLambdaNoParLabel() throws Exception {
            runTest("idea/idea-frontend-fir/testData/referenceResolve/invoke/lambdaNoParLabel.kt");
        }

        @Test
        @TestMetadata("lambdaNoParLabelIncorrectVararg.kt")
        public void testLambdaNoParLabelIncorrectVararg() throws Exception {
            runTest("idea/idea-frontend-fir/testData/referenceResolve/invoke/lambdaNoParLabelIncorrectVararg.kt");
        }

        @Test
        @TestMetadata("lambdaNoParRCurly.kt")
        public void testLambdaNoParRCurly() throws Exception {
            runTest("idea/idea-frontend-fir/testData/referenceResolve/invoke/lambdaNoParRCurly.kt");
        }

        @Test
        @TestMetadata("lambdaNoParRCurlyIncorrectVararg.kt")
        public void testLambdaNoParRCurlyIncorrectVararg() throws Exception {
            runTest("idea/idea-frontend-fir/testData/referenceResolve/invoke/lambdaNoParRCurlyIncorrectVararg.kt");
        }

        @Test
        @TestMetadata("noParams.kt")
        public void testNoParams() throws Exception {
            runTest("idea/idea-frontend-fir/testData/referenceResolve/invoke/noParams.kt");
        }

        @Test
        @TestMetadata("noParamsRPar.kt")
        public void testNoParamsRPar() throws Exception {
            runTest("idea/idea-frontend-fir/testData/referenceResolve/invoke/noParamsRPar.kt");
        }

        @Test
        @TestMetadata("nonemptyLambdaRPar.kt")
        public void testNonemptyLambdaRPar() throws Exception {
            runTest("idea/idea-frontend-fir/testData/referenceResolve/invoke/nonemptyLambdaRPar.kt");
        }

        @Test
        @TestMetadata("nonemptyLambdaRParIncorrectVararg.kt")
        public void testNonemptyLambdaRParIncorrectVararg() throws Exception {
            runTest("idea/idea-frontend-fir/testData/referenceResolve/invoke/nonemptyLambdaRParIncorrectVararg.kt");
        }

        @Test
        @TestMetadata("oneParam.kt")
        public void testOneParam() throws Exception {
            runTest("idea/idea-frontend-fir/testData/referenceResolve/invoke/oneParam.kt");
        }

        @Test
        @TestMetadata("oneParamRPar.kt")
        public void testOneParamRPar() throws Exception {
            runTest("idea/idea-frontend-fir/testData/referenceResolve/invoke/oneParamRPar.kt");
        }
    }

    @Nested
    @TestMetadata("idea/idea-frontend-fir/testData/referenceResolve/nestedTypes")
    @TestDataPath("$PROJECT_ROOT")
    public class NestedTypes {
        @Test
        public void testAllFilesPresentInNestedTypes() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("idea/idea-frontend-fir/testData/referenceResolve/nestedTypes"), Pattern.compile("^([^.]+)\\.kt$"), null, true);
        }

        @Test
        @TestMetadata("ResolveCompanionInCompanionType.kt")
        public void testResolveCompanionInCompanionType() throws Exception {
            runTest("idea/idea-frontend-fir/testData/referenceResolve/nestedTypes/ResolveCompanionInCompanionType.kt");
        }

        @Test
        @TestMetadata("ResolveEndOfPackageInType.kt")
        public void testResolveEndOfPackageInType() throws Exception {
            runTest("idea/idea-frontend-fir/testData/referenceResolve/nestedTypes/ResolveEndOfPackageInType.kt");
        }

        @Test
        @TestMetadata("ResolveMiddleOfPackageInType.kt")
        public void testResolveMiddleOfPackageInType() throws Exception {
            runTest("idea/idea-frontend-fir/testData/referenceResolve/nestedTypes/ResolveMiddleOfPackageInType.kt");
        }

        @Test
        @TestMetadata("ResolveNamedCompanionInCompanionType.kt")
        public void testResolveNamedCompanionInCompanionType() throws Exception {
            runTest("idea/idea-frontend-fir/testData/referenceResolve/nestedTypes/ResolveNamedCompanionInCompanionType.kt");
        }

        @Test
        @TestMetadata("ResolveStartOfPackageInType.kt")
        public void testResolveStartOfPackageInType() throws Exception {
            runTest("idea/idea-frontend-fir/testData/referenceResolve/nestedTypes/ResolveStartOfPackageInType.kt");
        }

        @Test
        @TestMetadata("ResolveTypeInTheEndOfType.kt")
        public void testResolveTypeInTheEndOfType() throws Exception {
            runTest("idea/idea-frontend-fir/testData/referenceResolve/nestedTypes/ResolveTypeInTheEndOfType.kt");
        }

        @Test
        @TestMetadata("ResolveTypeInTheMiddleOfCompanionType.kt")
        public void testResolveTypeInTheMiddleOfCompanionType() throws Exception {
            runTest("idea/idea-frontend-fir/testData/referenceResolve/nestedTypes/ResolveTypeInTheMiddleOfCompanionType.kt");
        }

        @Test
        @TestMetadata("ResolveTypeInTheMiddleOfFunctionalType.kt")
        public void testResolveTypeInTheMiddleOfFunctionalType() throws Exception {
            runTest("idea/idea-frontend-fir/testData/referenceResolve/nestedTypes/ResolveTypeInTheMiddleOfFunctionalType.kt");
        }

        @Test
        @TestMetadata("ResolveTypeInTheMiddleOfNullableType.kt")
        public void testResolveTypeInTheMiddleOfNullableType() throws Exception {
            runTest("idea/idea-frontend-fir/testData/referenceResolve/nestedTypes/ResolveTypeInTheMiddleOfNullableType.kt");
        }

        @Test
        @TestMetadata("ResolveTypeInTheMiddleOfType.kt")
        public void testResolveTypeInTheMiddleOfType() throws Exception {
            runTest("idea/idea-frontend-fir/testData/referenceResolve/nestedTypes/ResolveTypeInTheMiddleOfType.kt");
        }

        @Test
        @TestMetadata("ResolveTypeInTheStartOfCompanionType.kt")
        public void testResolveTypeInTheStartOfCompanionType() throws Exception {
            runTest("idea/idea-frontend-fir/testData/referenceResolve/nestedTypes/ResolveTypeInTheStartOfCompanionType.kt");
        }

        @Test
        @TestMetadata("ResolveTypeInTheStartOfType.kt")
        public void testResolveTypeInTheStartOfType() throws Exception {
            runTest("idea/idea-frontend-fir/testData/referenceResolve/nestedTypes/ResolveTypeInTheStartOfType.kt");
        }
    }

    @Nested
    @TestMetadata("idea/idea-frontend-fir/testData/referenceResolve/packageReference")
    @TestDataPath("$PROJECT_ROOT")
    public class PackageReference {
        @Test
        public void testAllFilesPresentInPackageReference() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("idea/idea-frontend-fir/testData/referenceResolve/packageReference"), Pattern.compile("^([^.]+)\\.kt$"), null, true);
        }

        @Test
        @TestMetadata("javaPackageFirstQualifier.kt")
        public void testJavaPackageFirstQualifier() throws Exception {
            runTest("idea/idea-frontend-fir/testData/referenceResolve/packageReference/javaPackageFirstQualifier.kt");
        }

        @Test
        @TestMetadata("javaPackageSecondQualifier.kt")
        public void testJavaPackageSecondQualifier() throws Exception {
            runTest("idea/idea-frontend-fir/testData/referenceResolve/packageReference/javaPackageSecondQualifier.kt");
        }

        @Test
        @TestMetadata("kotlinPackageFirstQualifier.kt")
        public void testKotlinPackageFirstQualifier() throws Exception {
            runTest("idea/idea-frontend-fir/testData/referenceResolve/packageReference/kotlinPackageFirstQualifier.kt");
        }

        @Test
        @TestMetadata("kotlinPackageSecondQualifier.kt")
        public void testKotlinPackageSecondQualifier() throws Exception {
            runTest("idea/idea-frontend-fir/testData/referenceResolve/packageReference/kotlinPackageSecondQualifier.kt");
        }
    }

    @Nested
    @TestMetadata("idea/idea-frontend-fir/testData/referenceResolve/qualifiedAccess")
    @TestDataPath("$PROJECT_ROOT")
    public class QualifiedAccess {
        @Test
        public void testAllFilesPresentInQualifiedAccess() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("idea/idea-frontend-fir/testData/referenceResolve/qualifiedAccess"), Pattern.compile("^([^.]+)\\.kt$"), null, true);
        }

        @Test
        @TestMetadata("callableReference1.kt")
        public void testCallableReference1() throws Exception {
            runTest("idea/idea-frontend-fir/testData/referenceResolve/qualifiedAccess/callableReference1.kt");
        }

        @Test
        @TestMetadata("callableReference2.kt")
        public void testCallableReference2() throws Exception {
            runTest("idea/idea-frontend-fir/testData/referenceResolve/qualifiedAccess/callableReference2.kt");
        }

        @Test
        @TestMetadata("callableReference3.kt")
        public void testCallableReference3() throws Exception {
            runTest("idea/idea-frontend-fir/testData/referenceResolve/qualifiedAccess/callableReference3.kt");
        }

        @Test
        @TestMetadata("nullSafeCallExpression.kt")
        public void testNullSafeCallExpression() throws Exception {
            runTest("idea/idea-frontend-fir/testData/referenceResolve/qualifiedAccess/nullSafeCallExpression.kt");
        }

        @Test
        @TestMetadata("ResolveFirstPackageOfFullyQualifiedReference.kt")
        public void testResolveFirstPackageOfFullyQualifiedReference() throws Exception {
            runTest("idea/idea-frontend-fir/testData/referenceResolve/qualifiedAccess/ResolveFirstPackageOfFullyQualifiedReference.kt");
        }

        @Test
        @TestMetadata("ResolveFullyQualifiedCompanionObject.kt")
        public void testResolveFullyQualifiedCompanionObject() throws Exception {
            runTest("idea/idea-frontend-fir/testData/referenceResolve/qualifiedAccess/ResolveFullyQualifiedCompanionObject.kt");
        }

        @Test
        @TestMetadata("ResolveOuterClassOfFullyQualifiedReference.kt")
        public void testResolveOuterClassOfFullyQualifiedReference() throws Exception {
            runTest("idea/idea-frontend-fir/testData/referenceResolve/qualifiedAccess/ResolveOuterClassOfFullyQualifiedReference.kt");
        }

        @Test
        @TestMetadata("ResolvePackageOfFullyQualifiedReference.kt")
        public void testResolvePackageOfFullyQualifiedReference() throws Exception {
            runTest("idea/idea-frontend-fir/testData/referenceResolve/qualifiedAccess/ResolvePackageOfFullyQualifiedReference.kt");
        }
    }
}
